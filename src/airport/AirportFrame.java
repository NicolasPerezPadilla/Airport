/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package airport;

import controller.LocationController;
import controller.PlaneController;
import controller.FlightController;
import controller.PassengerController;
import service.FlightService;
import dataTransfer.PassengerDTO;
import dataTransfer.FlightDTO;
import dataTransfer.LocationDTO;
import dataTransfer.PlaneDTO;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import loader.DataLoader;
import model.Flight;
import model.Location;
import model.Passenger;
import model.Plane;
import service.LocationService;
import service.PassengerService;
import service.PlaneService;

/**
 *
 * @author edangulo
 */
public class AirportFrame extends javax.swing.JFrame {

    /**
     * Creates new form AirportFrame
     */
    private int x, y;
    private PassengerController passengerController;
    private PlaneController planeController;
    private LocationController locationController;
    private FlightController flightController;
    private FlightService flightService;
    private PassengerService passengerService;
    private LocationService locationService;
    private PlaneService planeService;

    public AirportFrame() {
        initComponents();

        ArrayList<Location> locations = DataLoader.loadLocations();
        ArrayList<Plane> planes = DataLoader.loadPlanes();
        ArrayList<Flight> flights = DataLoader.loadFlights(locations, planes);
        ArrayList<Passenger> passengers = DataLoader.loadPassengers();

        locationService = new LocationService(locations);
        locationController = new LocationController(locationService);

        planeService = new PlaneService(planes);
        planeController = new PlaneController(planeService);

        flightService = new FlightService(planeController.getService(), locationController.getService(), flights);
        passengerService = new PassengerService(flightService, locationController.getService(), planeController.getService(), passengers);
        passengerController = new PassengerController(passengerService);
        flightController = new FlightController(flightService);

        this.setBackground(new Color(0, 0, 0, 0));
        this.setLocationRelativeTo(null);

        this.generateMonths();
        this.generateDays();
        this.generateHours();
        this.generateMinutes();
        this.blockPanels();
        fillPassengerComboBox();
        fillFlightToAddComboBox();
    }

    private void fillPassengerComboBox() {
        userSelect.removeAllItems();
        userSelect.addItem("Seleccione un pasajero.");

        for (PassengerDTO p : passengerController.getAllPassengers()) {
            userSelect.addItem(p.getId() + "");
        }
    }

    private void fillFlightToAddComboBox() {
        FlightToAdd.removeAllItems();                    
        FlightToAdd.addItem("Seleccione un vuelo.");  
        for (FlightDTO flight : flightController.getAllFlight()) {
            FlightToAdd.addItem(flight.getId());  
        }
    }

    private void blockPanels() {
        //9, 11
        for (int i = 1; i < GeneralPanel.getTabCount(); i++) {
            if (i != 9 && i != 11) {
                GeneralPanel.setEnabledAt(i, false);
            }
        }
    }

    private void generateMonths() {
        for (int i = 1; i < 13; i++) {
            PassengerBaseBirthdateMonth.addItem("" + i);
            DepartureDateMonth.addItem("" + i);
            PassengerBirthdateMonth.addItem("" + i);
        }
    }

    private void generateDays() {
        for (int i = 1; i < 32; i++) {
            PassengerBaseBirthdateDay.addItem("" + i);
            DepartureDateDay.addItem("" + i);
            PassengerBirthdateDay.addItem("" + i);
        }
    }

    private void generateHours() {
        for (int i = 0; i < 24; i++) {
            DepartureDateHour.addItem("" + i);
            ArrivalLocationHour.addItem("" + i);
            ScaleLocationHour.addItem("" + i);
            HourDelay.addItem("" + i);
        }
    }

    private void generateMinutes() {
        for (int i = 0; i < 60; i++) {
            DepartureDateMinute.addItem("" + i);
            ArrivalLocationMinute.addItem("" + i);
            ScaleLocationMinute.addItem("" + i);
            MinutesDelay.addItem("" + i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelRound1 = new airport.PanelRound();
        TopPanel = new airport.PanelRound();
        ExitBtn = new javax.swing.JButton();
        GeneralPanel = new javax.swing.JTabbedPane();
        SelectionPanel = new javax.swing.JPanel();
        user = new javax.swing.JRadioButton();
        administrator = new javax.swing.JRadioButton();
        userSelect = new javax.swing.JComboBox<>();
        PassengerRegister = new javax.swing.JPanel();
        PassengerBaseCountryLbl = new javax.swing.JLabel();
        PassengerBaseIDLbl = new javax.swing.JLabel();
        PassengerBaseFirstNameLbl = new javax.swing.JLabel();
        PassengerBaseLastNameLbl = new javax.swing.JLabel();
        PassengerBaseBirthdateLbl = new javax.swing.JLabel();
        PassengerBasePhonePlus = new javax.swing.JLabel();
        BaseCountryCode = new javax.swing.JTextField();
        PassengerBaseID = new javax.swing.JTextField();
        PassengerBaseBirthdateYear = new javax.swing.JTextField();
        PassengerBaseCountry = new javax.swing.JTextField();
        PassengerBasePhone = new javax.swing.JTextField();
        PassengerBasePhoneLbl = new javax.swing.JLabel();
        PassengerBaseBirthdateSpace1 = new javax.swing.JLabel();
        PassengerBaseLastName = new javax.swing.JTextField();
        PassengerBasePhoneSpace = new javax.swing.JLabel();
        PassengerBaseBirthdateMonth = new javax.swing.JComboBox<>();
        PassengerBaseFirstName = new javax.swing.JTextField();
        PassengerBaseBirthdateSpace2 = new javax.swing.JLabel();
        PassengerBaseBirthdateDay = new javax.swing.JComboBox<>();
        RegisterPassengerBtn = new javax.swing.JButton();
        AirplaneRegister = new javax.swing.JPanel();
        PlaneIDLbl = new javax.swing.JLabel();
        PlaneID = new javax.swing.JTextField();
        PlaneBrandLbl = new javax.swing.JLabel();
        PlaneBrand = new javax.swing.JTextField();
        PlaneModel = new javax.swing.JTextField();
        PlaneModelLbl = new javax.swing.JLabel();
        PlaneMaxCapacity = new javax.swing.JTextField();
        PlaneMaxCapacityLbl = new javax.swing.JLabel();
        PlaneAirline = new javax.swing.JTextField();
        PlaneAirlineLbl = new javax.swing.JLabel();
        CreatePlaneBtn = new javax.swing.JButton();
        LocationRegister = new javax.swing.JPanel();
        AirportIDLbl = new javax.swing.JLabel();
        AirportID = new javax.swing.JTextField();
        AirportNameLbl = new javax.swing.JLabel();
        AirportName = new javax.swing.JTextField();
        AirportCity = new javax.swing.JTextField();
        AirportCityLbl = new javax.swing.JLabel();
        AirportCountryLbl = new javax.swing.JLabel();
        AirportCountry = new javax.swing.JTextField();
        AirportLatitude = new javax.swing.JTextField();
        AirportLatitudeLbl = new javax.swing.JLabel();
        AirportLongitudeLbl = new javax.swing.JLabel();
        AirportLongitude = new javax.swing.JTextField();
        CreateLocationBtn = new javax.swing.JButton();
        FlightRegister = new javax.swing.JPanel();
        FlightIDLbl = new javax.swing.JLabel();
        FlightID = new javax.swing.JTextField();
        FlightPlaneLbl = new javax.swing.JLabel();
        FlightPlane = new javax.swing.JComboBox<>();
        DepartureLocation = new javax.swing.JComboBox<>();
        DepartureLocationLbl = new javax.swing.JLabel();
        ArrivalLocation = new javax.swing.JComboBox<>();
        ArrivalLocationLbl = new javax.swing.JLabel();
        ScaleLocationLbl = new javax.swing.JLabel();
        ScaleLocation = new javax.swing.JComboBox<>();
        ScaleLocationDurationLbl = new javax.swing.JLabel();
        ArrivalLocationDUrationLbl = new javax.swing.JLabel();
        DepartureDateLbl = new javax.swing.JLabel();
        DepartureDateYear = new javax.swing.JTextField();
        DepartureDateSpace1 = new javax.swing.JLabel();
        DepartureDateMonth = new javax.swing.JComboBox<>();
        DepartureDateSpace2 = new javax.swing.JLabel();
        DepartureDateDay = new javax.swing.JComboBox<>();
        DepartureDateSpace3 = new javax.swing.JLabel();
        DepartureDateHour = new javax.swing.JComboBox<>();
        DepartureDateSpace4 = new javax.swing.JLabel();
        DepartureDateMinute = new javax.swing.JComboBox<>();
        ArrivalLocationHour = new javax.swing.JComboBox<>();
        ArrivalLocationSpace = new javax.swing.JLabel();
        ArrivalLocationMinute = new javax.swing.JComboBox<>();
        ScaleLocationSpace = new javax.swing.JLabel();
        ScaleLocationHour = new javax.swing.JComboBox<>();
        ScaleLocationMinute = new javax.swing.JComboBox<>();
        CreateFlightBtn = new javax.swing.JButton();
        UpdatePassengerInfo = new javax.swing.JPanel();
        PassengerIDLbl = new javax.swing.JLabel();
        PassengerID = new javax.swing.JTextField();
        PassengerFirstNameLbl = new javax.swing.JLabel();
        PassengerFirstName = new javax.swing.JTextField();
        PassengerLastNameLbl = new javax.swing.JLabel();
        PassengerLastName = new javax.swing.JTextField();
        PassengerBirthdateLbl = new javax.swing.JLabel();
        PassengerBirthdateYear = new javax.swing.JTextField();
        PassengerBirthdateMonth = new javax.swing.JComboBox<>();
        PassengerBirthdateDay = new javax.swing.JComboBox<>();
        PassengerPhoneNumber = new javax.swing.JTextField();
        SpaceLbl = new javax.swing.JLabel();
        CountryPhoneCode = new javax.swing.JTextField();
        PlusLbl = new javax.swing.JLabel();
        PassengerPhoneLbl = new javax.swing.JLabel();
        PassengerCountryLbl = new javax.swing.JLabel();
        PassengerCountry = new javax.swing.JTextField();
        UpdatePassengerInfoBtn = new javax.swing.JButton();
        AddPassengerToFlight = new javax.swing.JPanel();
        IdPassengerToFlight = new javax.swing.JTextField();
        IdPassengerToFlightLbl = new javax.swing.JLabel();
        FlightToAddLbl = new javax.swing.JLabel();
        FlightToAdd = new javax.swing.JComboBox<>();
        AddPassengerToFlightBtn = new javax.swing.JButton();
        ShowPassengerFlights = new javax.swing.JPanel();
        PassengerFlightsPane = new javax.swing.JScrollPane();
        PassengerFlightsTable = new javax.swing.JTable();
        RefreshPassengersFlights = new javax.swing.JButton();
        ShowAllPassengers = new javax.swing.JPanel();
        PassengersPane = new javax.swing.JScrollPane();
        PassengersTable = new javax.swing.JTable();
        PassengersRefresh = new javax.swing.JButton();
        ShowAllFlights = new javax.swing.JPanel();
        FlightsPane = new javax.swing.JScrollPane();
        FlightsTable = new javax.swing.JTable();
        RefreshFlights = new javax.swing.JButton();
        ShowAllPlanes = new javax.swing.JPanel();
        RefreshPlanes = new javax.swing.JButton();
        PlanesPane = new javax.swing.JScrollPane();
        PlanesTable = new javax.swing.JTable();
        ShowAllLocations = new javax.swing.JPanel();
        LocationsPane = new javax.swing.JScrollPane();
        LocationsTable = new javax.swing.JTable();
        RefreshLocations = new javax.swing.JButton();
        DelayFlight = new javax.swing.JPanel();
        HourDelay = new javax.swing.JComboBox<>();
        HoursDelayLbl = new javax.swing.JLabel();
        IdDelayLbl = new javax.swing.JLabel();
        IdDelay = new javax.swing.JComboBox<>();
        MinutesDelayLbl = new javax.swing.JLabel();
        MinutesDelay = new javax.swing.JComboBox<>();
        DelayBtn = new javax.swing.JButton();
        BottomPanel = new airport.PanelRound();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelRound1.setRadius(40);
        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TopPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                TopPanelMouseDragged(evt);
            }
        });
        TopPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TopPanelMousePressed(evt);
            }
        });

        ExitBtn.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ExitBtn.setText("X");
        ExitBtn.setBorderPainted(false);
        ExitBtn.setContentAreaFilled(false);
        ExitBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TopPanelLayout = new javax.swing.GroupLayout(TopPanel);
        TopPanel.setLayout(TopPanelLayout);
        TopPanelLayout.setHorizontalGroup(
            TopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TopPanelLayout.createSequentialGroup()
                .addContainerGap(1083, Short.MAX_VALUE)
                .addComponent(ExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        TopPanelLayout.setVerticalGroup(
            TopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TopPanelLayout.createSequentialGroup()
                .addComponent(ExitBtn)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        panelRound1.add(TopPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, -1));

        GeneralPanel.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N

        SelectionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        user.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        user.setText("User");
        user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActionPerformed(evt);
            }
        });
        SelectionPanel.add(user, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 230, -1, -1));

        administrator.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        administrator.setText("Administrator");
        administrator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                administratorActionPerformed(evt);
            }
        });
        SelectionPanel.add(administrator, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 164, -1, -1));

        userSelect.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        userSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User" }));
        userSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userSelectActionPerformed(evt);
            }
        });
        SelectionPanel.add(userSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 130, -1));

        GeneralPanel.addTab("Administration", SelectionPanel);

        PassengerRegister.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PassengerBaseCountryLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseCountryLbl.setText("Country:");
        PassengerRegister.add(PassengerBaseCountryLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, -1, -1));

        PassengerBaseIDLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseIDLbl.setText("ID:");
        PassengerRegister.add(PassengerBaseIDLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        PassengerBaseFirstNameLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseFirstNameLbl.setText("First Name:");
        PassengerRegister.add(PassengerBaseFirstNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        PassengerBaseLastNameLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseLastNameLbl.setText("Last Name:");
        PassengerRegister.add(PassengerBaseLastNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        PassengerBaseBirthdateLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseBirthdateLbl.setText("Birthdate:");
        PassengerRegister.add(PassengerBaseBirthdateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        PassengerBasePhonePlus.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBasePhonePlus.setText("+");
        PassengerRegister.add(PassengerBasePhonePlus, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 20, -1));

        BaseCountryCode.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegister.add(BaseCountryCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 50, -1));

        PassengerBaseID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegister.add(PassengerBaseID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 130, -1));

        PassengerBaseBirthdateYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegister.add(PassengerBaseBirthdateYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 90, -1));

        PassengerBaseCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegister.add(PassengerBaseCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, 130, -1));

        PassengerBasePhone.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegister.add(PassengerBasePhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 340, 130, -1));

        PassengerBasePhoneLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBasePhoneLbl.setText("Phone:");
        PassengerRegister.add(PassengerBasePhoneLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, -1, -1));

        PassengerBaseBirthdateSpace1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseBirthdateSpace1.setText("-");
        PassengerRegister.add(PassengerBaseBirthdateSpace1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 280, 30, -1));

        PassengerBaseLastName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegister.add(PassengerBaseLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 130, -1));

        PassengerBasePhoneSpace.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBasePhoneSpace.setText("-");
        PassengerRegister.add(PassengerBasePhoneSpace, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, 30, -1));

        PassengerBaseBirthdateMonth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseBirthdateMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));
        PassengerRegister.add(PassengerBaseBirthdateMonth, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, -1, -1));

        PassengerBaseFirstName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegister.add(PassengerBaseFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 130, -1));

        PassengerBaseBirthdateSpace2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseBirthdateSpace2.setText("-");
        PassengerRegister.add(PassengerBaseBirthdateSpace2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 280, 30, -1));

        PassengerBaseBirthdateDay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBaseBirthdateDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));
        PassengerRegister.add(PassengerBaseBirthdateDay, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 280, -1, -1));

        RegisterPassengerBtn.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RegisterPassengerBtn.setText("Register");
        RegisterPassengerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterPassengerBtnActionPerformed(evt);
            }
        });
        PassengerRegister.add(RegisterPassengerBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 480, -1, -1));

        GeneralPanel.addTab("Passenger registration", PassengerRegister);

        AirplaneRegister.setLayout(null);

        PlaneIDLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneIDLbl.setText("ID:");
        AirplaneRegister.add(PlaneIDLbl);
        PlaneIDLbl.setBounds(53, 96, 22, 25);

        PlaneID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirplaneRegister.add(PlaneID);
        PlaneID.setBounds(180, 93, 130, 31);

        PlaneBrandLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneBrandLbl.setText("Brand:");
        AirplaneRegister.add(PlaneBrandLbl);
        PlaneBrandLbl.setBounds(53, 157, 50, 25);

        PlaneBrand.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirplaneRegister.add(PlaneBrand);
        PlaneBrand.setBounds(180, 154, 130, 31);

        PlaneModel.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirplaneRegister.add(PlaneModel);
        PlaneModel.setBounds(180, 213, 130, 31);

        PlaneModelLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneModelLbl.setText("Model:");
        AirplaneRegister.add(PlaneModelLbl);
        PlaneModelLbl.setBounds(53, 216, 55, 25);

        PlaneMaxCapacity.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirplaneRegister.add(PlaneMaxCapacity);
        PlaneMaxCapacity.setBounds(180, 273, 130, 31);

        PlaneMaxCapacityLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneMaxCapacityLbl.setText("Max Capacity:");
        AirplaneRegister.add(PlaneMaxCapacityLbl);
        PlaneMaxCapacityLbl.setBounds(53, 276, 109, 25);

        PlaneAirline.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirplaneRegister.add(PlaneAirline);
        PlaneAirline.setBounds(180, 333, 130, 31);

        PlaneAirlineLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneAirlineLbl.setText("Airline:");
        AirplaneRegister.add(PlaneAirlineLbl);
        PlaneAirlineLbl.setBounds(53, 336, 70, 25);

        CreatePlaneBtn.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        CreatePlaneBtn.setText("Create");
        CreatePlaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatePlaneBtnActionPerformed(evt);
            }
        });
        AirplaneRegister.add(CreatePlaneBtn);
        CreatePlaneBtn.setBounds(490, 480, 120, 40);

        GeneralPanel.addTab("Airplane registration", AirplaneRegister);

        AirportIDLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirportIDLbl.setText("Airport ID:");

        AirportID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        AirportNameLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirportNameLbl.setText("Airport name:");

        AirportName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        AirportCity.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        AirportCityLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirportCityLbl.setText("Airport city:");

        AirportCountryLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirportCountryLbl.setText("Airport country:");

        AirportCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        AirportLatitude.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        AirportLatitudeLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirportLatitudeLbl.setText("Airport latitude:");

        AirportLongitudeLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirportLongitudeLbl.setText("Airport longitude:");

        AirportLongitude.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        CreateLocationBtn.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        CreateLocationBtn.setText("Create");
        CreateLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateLocationBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LocationRegisterLayout = new javax.swing.GroupLayout(LocationRegister);
        LocationRegister.setLayout(LocationRegisterLayout);
        LocationRegisterLayout.setHorizontalGroup(
            LocationRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationRegisterLayout.createSequentialGroup()
                .addGroup(LocationRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LocationRegisterLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(LocationRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AirportIDLbl)
                            .addComponent(AirportNameLbl)
                            .addComponent(AirportCityLbl)
                            .addComponent(AirportCountryLbl)
                            .addComponent(AirportLatitudeLbl)
                            .addComponent(AirportLongitudeLbl))
                        .addGap(80, 80, 80)
                        .addGroup(LocationRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AirportLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportID, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportCity, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(LocationRegisterLayout.createSequentialGroup()
                        .addGap(515, 515, 515)
                        .addComponent(CreateLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(515, 515, 515))
        );
        LocationRegisterLayout.setVerticalGroup(
            LocationRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationRegisterLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(LocationRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(LocationRegisterLayout.createSequentialGroup()
                        .addComponent(AirportIDLbl)
                        .addGap(36, 36, 36)
                        .addComponent(AirportNameLbl)
                        .addGap(34, 34, 34)
                        .addComponent(AirportCityLbl)
                        .addGap(35, 35, 35)
                        .addComponent(AirportCountryLbl)
                        .addGap(35, 35, 35)
                        .addComponent(AirportLatitudeLbl))
                    .addGroup(LocationRegisterLayout.createSequentialGroup()
                        .addComponent(AirportID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(AirportName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(AirportCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(AirportCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(AirportLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44)
                .addGroup(LocationRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AirportLongitudeLbl)
                    .addComponent(AirportLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(CreateLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        GeneralPanel.addTab("Location registration", LocationRegister);

        FlightIDLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightIDLbl.setText("ID:");

        FlightID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        FlightPlaneLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightPlaneLbl.setText("Plane:");

        FlightPlane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightPlane.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Plane" }));

        DepartureLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        DepartureLocationLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureLocationLbl.setText("Departure location:");

        ArrivalLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ArrivalLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        ArrivalLocationLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ArrivalLocationLbl.setText("Arrival location:");

        ScaleLocationLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ScaleLocationLbl.setText("Scale location:");

        ScaleLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ScaleLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        ScaleLocationDurationLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ScaleLocationDurationLbl.setText("Duration:");

        ArrivalLocationDUrationLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ArrivalLocationDUrationLbl.setText("Duration:");

        DepartureDateLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateLbl.setText("Departure date:");

        DepartureDateYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        DepartureDateSpace1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateSpace1.setText("-");

        DepartureDateMonth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));

        DepartureDateSpace2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateSpace2.setText("-");

        DepartureDateDay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        DepartureDateSpace3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateSpace3.setText("-");

        DepartureDateHour.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        DepartureDateSpace4.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateSpace4.setText("-");

        DepartureDateMinute.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureDateMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        ArrivalLocationHour.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ArrivalLocationHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        ArrivalLocationSpace.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ArrivalLocationSpace.setText("-");

        ArrivalLocationMinute.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ArrivalLocationMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        ScaleLocationSpace.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ScaleLocationSpace.setText("-");

        ScaleLocationHour.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ScaleLocationHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        ScaleLocationMinute.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ScaleLocationMinute.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        CreateFlightBtn.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        CreateFlightBtn.setText("Create");
        CreateFlightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateFlightBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FlightRegisterLayout = new javax.swing.GroupLayout(FlightRegister);
        FlightRegister.setLayout(FlightRegisterLayout);
        FlightRegisterLayout.setHorizontalGroup(
            FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlightRegisterLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                        .addComponent(ScaleLocationLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ScaleLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FlightRegisterLayout.createSequentialGroup()
                        .addComponent(ArrivalLocationLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ArrivalLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                        .addComponent(DepartureLocationLbl)
                        .addGap(46, 46, 46)
                        .addComponent(DepartureLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FlightIDLbl)
                            .addComponent(FlightPlaneLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FlightID)
                            .addComponent(FlightPlane, 0, 130, Short.MAX_VALUE))))
                .addGap(45, 45, 45)
                .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ScaleLocationDurationLbl)
                    .addComponent(ArrivalLocationDUrationLbl)
                    .addComponent(DepartureDateLbl))
                .addGap(18, 18, 18)
                .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                        .addComponent(DepartureDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegisterLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(DepartureDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(DepartureDateSpace1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DepartureDateSpace2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FlightRegisterLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(DepartureDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegisterLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(DepartureDateHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(DepartureDateSpace3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DepartureDateSpace4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FlightRegisterLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(DepartureDateMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))
                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegisterLayout.createSequentialGroup()
                                .addComponent(ArrivalLocationHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ArrivalLocationSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(ArrivalLocationMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(FlightRegisterLayout.createSequentialGroup()
                                .addComponent(ScaleLocationHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ScaleLocationSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(ScaleLocationMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FlightRegisterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CreateFlightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(530, 530, 530))
        );
        FlightRegisterLayout.setVerticalGroup(
            FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlightRegisterLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(FlightIDLbl))
                    .addComponent(FlightID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FlightPlaneLbl)
                    .addComponent(FlightPlane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DepartureDateHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DepartureDateSpace3)
                    .addComponent(DepartureDateSpace4)
                    .addComponent(DepartureDateMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(FlightRegisterLayout.createSequentialGroup()
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(DepartureLocationLbl)
                                .addComponent(DepartureLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DepartureDateLbl))
                            .addComponent(DepartureDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DepartureDateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DepartureDateSpace1)
                            .addComponent(DepartureDateSpace2)
                            .addComponent(DepartureDateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ArrivalLocationLbl)
                                .addComponent(ArrivalLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ArrivalLocationDUrationLbl))
                            .addComponent(ArrivalLocationHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ArrivalLocationSpace)
                            .addComponent(ArrivalLocationMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScaleLocationHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ScaleLocationSpace)
                            .addComponent(ScaleLocationMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FlightRegisterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ScaleLocationLbl)
                                .addComponent(ScaleLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ScaleLocationDurationLbl)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(CreateFlightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        GeneralPanel.addTab("Flight registration", FlightRegister);

        PassengerIDLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerIDLbl.setText("ID:");

        PassengerID.setEditable(false);
        PassengerID.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerID.setEnabled(false);

        PassengerFirstNameLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerFirstNameLbl.setText("First Name:");

        PassengerFirstName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        PassengerLastNameLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerLastNameLbl.setText("Last Name:");

        PassengerLastName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        PassengerBirthdateLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBirthdateLbl.setText("Birthdate:");

        PassengerBirthdateYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        PassengerBirthdateMonth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBirthdateMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));

        PassengerBirthdateDay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerBirthdateDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        PassengerPhoneNumber.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        SpaceLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        SpaceLbl.setText("-");

        CountryPhoneCode.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        PlusLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlusLbl.setText("+");

        PassengerPhoneLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerPhoneLbl.setText("Phone:");

        PassengerCountryLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerCountryLbl.setText("Country:");

        PassengerCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        UpdatePassengerInfoBtn.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        UpdatePassengerInfoBtn.setText("Update");
        UpdatePassengerInfoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePassengerInfoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UpdatePassengerInfoLayout = new javax.swing.GroupLayout(UpdatePassengerInfo);
        UpdatePassengerInfo.setLayout(UpdatePassengerInfoLayout);
        UpdatePassengerInfoLayout.setHorizontalGroup(
            UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(PassengerIDLbl)
                                .addGap(108, 108, 108)
                                .addComponent(PassengerID, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(PassengerFirstNameLbl)
                                .addGap(41, 41, 41)
                                .addComponent(PassengerFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(PassengerLastNameLbl)
                                .addGap(43, 43, 43)
                                .addComponent(PassengerLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(PassengerBirthdateLbl)
                                .addGap(55, 55, 55)
                                .addComponent(PassengerBirthdateYear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(PassengerBirthdateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(PassengerBirthdateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(PassengerPhoneLbl)
                                .addGap(56, 56, 56)
                                .addComponent(PlusLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(CountryPhoneCode, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(SpaceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(PassengerPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(PassengerCountryLbl)
                                .addGap(63, 63, 63)
                                .addComponent(PassengerCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                        .addGap(507, 507, 507)
                        .addComponent(UpdatePassengerInfoBtn)))
                .addContainerGap(555, Short.MAX_VALUE))
        );
        UpdatePassengerInfoLayout.setVerticalGroup(
            UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PassengerIDLbl)
                    .addComponent(PassengerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PassengerFirstNameLbl)
                    .addComponent(PassengerFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PassengerLastNameLbl)
                    .addComponent(PassengerLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PassengerBirthdateLbl)
                    .addComponent(PassengerBirthdateYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PassengerBirthdateMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PassengerBirthdateDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PassengerPhoneLbl)
                    .addComponent(PlusLbl)
                    .addComponent(CountryPhoneCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SpaceLbl)
                    .addComponent(PassengerPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PassengerCountryLbl)
                    .addComponent(PassengerCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(UpdatePassengerInfoBtn)
                .addGap(113, 113, 113))
        );

        GeneralPanel.addTab("Update info", UpdatePassengerInfo);

        IdPassengerToFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        IdPassengerToFlight.setEnabled(false);

        IdPassengerToFlightLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        IdPassengerToFlightLbl.setText("ID:");

        FlightToAddLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightToAddLbl.setText("Flight:");

        FlightToAdd.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightToAdd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Flight" }));

        AddPassengerToFlightBtn.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AddPassengerToFlightBtn.setText("Add");
        AddPassengerToFlightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPassengerToFlightBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddPassengerToFlightLayout = new javax.swing.GroupLayout(AddPassengerToFlight);
        AddPassengerToFlight.setLayout(AddPassengerToFlightLayout);
        AddPassengerToFlightLayout.setHorizontalGroup(
            AddPassengerToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddPassengerToFlightLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(AddPassengerToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IdPassengerToFlightLbl)
                    .addComponent(FlightToAddLbl))
                .addGap(79, 79, 79)
                .addGroup(AddPassengerToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FlightToAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IdPassengerToFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(829, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddPassengerToFlightLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddPassengerToFlightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(509, 509, 509))
        );
        AddPassengerToFlightLayout.setVerticalGroup(
            AddPassengerToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddPassengerToFlightLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(AddPassengerToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddPassengerToFlightLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(IdPassengerToFlightLbl))
                    .addComponent(IdPassengerToFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(AddPassengerToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FlightToAddLbl)
                    .addComponent(FlightToAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 288, Short.MAX_VALUE)
                .addComponent(AddPassengerToFlightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );

        GeneralPanel.addTab("Add to flight", AddPassengerToFlight);

        PassengerFlightsTable.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerFlightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Departure Date", "Arrival Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PassengerFlightsPane.setViewportView(PassengerFlightsTable);

        RefreshPassengersFlights.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RefreshPassengersFlights.setText("Refresh");
        RefreshPassengersFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshPassengersFlightsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowPassengerFlightsLayout = new javax.swing.GroupLayout(ShowPassengerFlights);
        ShowPassengerFlights.setLayout(ShowPassengerFlightsLayout);
        ShowPassengerFlightsLayout.setHorizontalGroup(
            ShowPassengerFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowPassengerFlightsLayout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addComponent(PassengerFlightsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(291, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowPassengerFlightsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RefreshPassengersFlights)
                .addGap(527, 527, 527))
        );
        ShowPassengerFlightsLayout.setVerticalGroup(
            ShowPassengerFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowPassengerFlightsLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(PassengerFlightsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(RefreshPassengersFlights)
                .addContainerGap())
        );

        GeneralPanel.addTab("Show my flights", ShowPassengerFlights);

        PassengersTable.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Birthdate", "Age", "Phone", "Country", "Num Flight"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PassengersPane.setViewportView(PassengersTable);

        PassengersRefresh.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengersRefresh.setText("Refresh");
        PassengersRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PassengersRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowAllPassengersLayout = new javax.swing.GroupLayout(ShowAllPassengers);
        ShowAllPassengers.setLayout(ShowAllPassengersLayout);
        ShowAllPassengersLayout.setHorizontalGroup(
            ShowAllPassengersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowAllPassengersLayout.createSequentialGroup()
                .addGroup(ShowAllPassengersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowAllPassengersLayout.createSequentialGroup()
                        .addGap(489, 489, 489)
                        .addComponent(PassengersRefresh))
                    .addGroup(ShowAllPassengersLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(PassengersPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1078, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        ShowAllPassengersLayout.setVerticalGroup(
            ShowAllPassengersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowAllPassengersLayout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addComponent(PassengersPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PassengersRefresh)
                .addContainerGap())
        );

        GeneralPanel.addTab("Show all passengers", ShowAllPassengers);

        FlightsTable.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Departure Airport ID", "Arrival Airport ID", "Scale Airport ID", "Departure Date", "Arrival Date", "Plane ID", "Number Passengers"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FlightsPane.setViewportView(FlightsTable);

        RefreshFlights.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RefreshFlights.setText("Refresh");
        RefreshFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshFlightsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowAllFlightsLayout = new javax.swing.GroupLayout(ShowAllFlights);
        ShowAllFlights.setLayout(ShowAllFlightsLayout);
        ShowAllFlightsLayout.setHorizontalGroup(
            ShowAllFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowAllFlightsLayout.createSequentialGroup()
                .addGroup(ShowAllFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowAllFlightsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(FlightsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ShowAllFlightsLayout.createSequentialGroup()
                        .addGap(521, 521, 521)
                        .addComponent(RefreshFlights)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        ShowAllFlightsLayout.setVerticalGroup(
            ShowAllFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowAllFlightsLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(FlightsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RefreshFlights)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        GeneralPanel.addTab("Show all flights", ShowAllFlights);

        RefreshPlanes.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RefreshPlanes.setText("Refresh");
        RefreshPlanes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshPlanesActionPerformed(evt);
            }
        });

        PlanesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Model", "Max Capacity", "Airline", "Number Flights"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PlanesPane.setViewportView(PlanesTable);

        javax.swing.GroupLayout ShowAllPlanesLayout = new javax.swing.GroupLayout(ShowAllPlanes);
        ShowAllPlanes.setLayout(ShowAllPlanesLayout);
        ShowAllPlanesLayout.setHorizontalGroup(
            ShowAllPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowAllPlanesLayout.createSequentialGroup()
                .addGroup(ShowAllPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowAllPlanesLayout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(RefreshPlanes))
                    .addGroup(ShowAllPlanesLayout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(PlanesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(189, Short.MAX_VALUE))
        );
        ShowAllPlanesLayout.setVerticalGroup(
            ShowAllPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowAllPlanesLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(PlanesPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(RefreshPlanes)
                .addGap(17, 17, 17))
        );

        GeneralPanel.addTab("Show all planes", ShowAllPlanes);

        LocationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airport ID", "Airport Name", "City", "Country"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        LocationsPane.setViewportView(LocationsTable);

        RefreshLocations.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RefreshLocations.setText("Refresh");
        RefreshLocations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshLocationsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowAllLocationsLayout = new javax.swing.GroupLayout(ShowAllLocations);
        ShowAllLocations.setLayout(ShowAllLocationsLayout);
        ShowAllLocationsLayout.setHorizontalGroup(
            ShowAllLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowAllLocationsLayout.createSequentialGroup()
                .addGroup(ShowAllLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowAllLocationsLayout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(RefreshLocations))
                    .addGroup(ShowAllLocationsLayout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addComponent(LocationsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        ShowAllLocationsLayout.setVerticalGroup(
            ShowAllLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowAllLocationsLayout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(LocationsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(RefreshLocations)
                .addGap(17, 17, 17))
        );

        GeneralPanel.addTab("Show all locations", ShowAllLocations);

        HourDelay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        HourDelay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        HoursDelayLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        HoursDelayLbl.setText("Hours:");

        IdDelayLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        IdDelayLbl.setText("ID:");

        IdDelay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        IdDelay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID" }));

        MinutesDelayLbl.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        MinutesDelayLbl.setText("Minutes:");

        MinutesDelay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        MinutesDelay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        DelayBtn.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DelayBtn.setText("Delay");
        DelayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelayBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DelayFlightLayout = new javax.swing.GroupLayout(DelayFlight);
        DelayFlight.setLayout(DelayFlightLayout);
        DelayFlightLayout.setHorizontalGroup(
            DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DelayFlightLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DelayFlightLayout.createSequentialGroup()
                        .addComponent(MinutesDelayLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MinutesDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DelayFlightLayout.createSequentialGroup()
                        .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IdDelayLbl)
                            .addComponent(HoursDelayLbl))
                        .addGap(79, 79, 79)
                        .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HourDelay, 0, 105, Short.MAX_VALUE)
                            .addComponent(IdDelay, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(820, 820, 820))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DelayFlightLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(DelayBtn)
                .addGap(531, 531, 531))
        );
        DelayFlightLayout.setVerticalGroup(
            DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DelayFlightLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IdDelayLbl)
                    .addComponent(IdDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HoursDelayLbl)
                    .addComponent(HourDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MinutesDelayLbl)
                    .addComponent(MinutesDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 307, Short.MAX_VALUE)
                .addComponent(DelayBtn)
                .addGap(33, 33, 33))
        );

        GeneralPanel.addTab("Delay flight", DelayFlight);

        panelRound1.add(GeneralPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 41, 1150, 620));

        javax.swing.GroupLayout BottomPanelLayout = new javax.swing.GroupLayout(BottomPanel);
        BottomPanel.setLayout(BottomPanelLayout);
        BottomPanelLayout.setHorizontalGroup(
            BottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1150, Short.MAX_VALUE)
        );
        BottomPanelLayout.setVerticalGroup(
            BottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        panelRound1.add(BottomPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 660, 1150, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void TopPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopPanelMousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_TopPanelMousePressed

    private void TopPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopPanelMouseDragged
        this.setLocation(this.getLocation().x + evt.getX() - x, this.getLocation().y + evt.getY() - y);
    }//GEN-LAST:event_TopPanelMouseDragged

    private void administratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_administratorActionPerformed
        if (user.isSelected()) {
            user.setSelected(false);
            userSelect.setSelectedIndex(0);

        }
        for (int i = 1; i < GeneralPanel.getTabCount(); i++) {
            GeneralPanel.setEnabledAt(i, true);
        }
        GeneralPanel.setEnabledAt(5, false);
        GeneralPanel.setEnabledAt(6, false);
    }//GEN-LAST:event_administratorActionPerformed

    private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
        if (administrator.isSelected()) {
            administrator.setSelected(false);
        }
        for (int i = 1; i < GeneralPanel.getTabCount(); i++) {

            GeneralPanel.setEnabledAt(i, false);

        }
        GeneralPanel.setEnabledAt(9, true);
        GeneralPanel.setEnabledAt(5, true);
        GeneralPanel.setEnabledAt(6, true);
        GeneralPanel.setEnabledAt(7, true);
        GeneralPanel.setEnabledAt(11, true);
    }//GEN-LAST:event_userActionPerformed

    private void RegisterPassengerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterPassengerBtnActionPerformed
        // TODO add your handling code here:
        long id = Long.parseLong(PassengerBaseID.getText());
        String firstname = PassengerBaseFirstName.getText();
        String lastname = PassengerBaseLastName.getText();
        int year = Integer.parseInt(PassengerBaseBirthdateYear.getText());
        int month = Integer.parseInt(PassengerBaseBirthdateMonth.getItemAt(PassengerBaseBirthdateMonth.getSelectedIndex()));
        int day = Integer.parseInt(PassengerBaseBirthdateDay.getItemAt(PassengerBaseBirthdateDay.getSelectedIndex()));
        int phoneCode = Integer.parseInt(BaseCountryCode.getText());
        long phone = Long.parseLong(PassengerBasePhone.getText());
        String country = PassengerBaseCountry.getText();

        LocalDate birthDate = LocalDate.of(year, month, day);

        passengerController.createPassenger(new PassengerDTO(id, firstname, lastname, birthDate, phoneCode, phone, country));
        this.userSelect.addItem("" + id);
    }//GEN-LAST:event_RegisterPassengerBtnActionPerformed

    private void CreatePlaneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatePlaneBtnActionPerformed
        // TODO add your handling code here:
        String id = PlaneID.getText();
        String brand = PlaneBrand.getText();
        String model = PlaneModel.getText();
        int maxCapacity = Integer.parseInt(PlaneMaxCapacity.getText());
        String airline = PlaneAirline.getText();

        planeController.createPlane(new PlaneDTO(id, brand, model, maxCapacity, airline));

        this.FlightPlane.addItem(id);
    }//GEN-LAST:event_CreatePlaneBtnActionPerformed

    private void CreateLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateLocationBtnActionPerformed
        // TODO add your handling code here:
        String id = AirportID.getText();
        String name = AirportName.getText();
        String city = AirportCity.getText();
        String country = AirportCountry.getText();
        double latitude = Double.parseDouble(AirportLatitude.getText());
        double longitude = Double.parseDouble(AirportLongitude.getText());

        locationController.createLocation(new LocationDTO(id, name, city, country, latitude, longitude));

        this.DepartureLocation.addItem(id);
        this.ArrivalLocation.addItem(id);
        this.ScaleLocation.addItem(id);
    }//GEN-LAST:event_CreateLocationBtnActionPerformed

    private void CreateFlightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateFlightBtnActionPerformed
        // TODO add your handling code here:
        String id = FlightID.getText();
        String planeId = FlightPlane.getItemAt(FlightPlane.getSelectedIndex());
        String departureLocationId = DepartureLocation.getItemAt(DepartureLocation.getSelectedIndex());
        String arrivalLocationId = ArrivalLocation.getItemAt(ArrivalLocation.getSelectedIndex());
        String scaleLocationId = ScaleLocation.getItemAt(ScaleLocation.getSelectedIndex());
        int year = Integer.parseInt(DepartureDateYear.getText());
        int month = Integer.parseInt(DepartureDateMonth.getItemAt(DepartureDateMonth.getSelectedIndex()));
        int day = Integer.parseInt(DepartureDateDay.getItemAt(DepartureDateDay.getSelectedIndex()));
        int hour = Integer.parseInt(DepartureDateHour.getItemAt(DepartureDateHour.getSelectedIndex()));
        int minutes = Integer.parseInt(DepartureDateMinute.getItemAt(DepartureDateMinute.getSelectedIndex()));
        int hoursDurationsArrival = Integer.parseInt(ArrivalLocationHour.getItemAt(ArrivalLocationHour.getSelectedIndex()));
        int minutesDurationsArrival = Integer.parseInt(ArrivalLocationMinute.getItemAt(ArrivalLocationMinute.getSelectedIndex()));
        int hoursDurationsScale = Integer.parseInt(ScaleLocationHour.getItemAt(ScaleLocationHour.getSelectedIndex()));
        int minutesDurationsScale = Integer.parseInt(ScaleLocationMinute.getItemAt(ScaleLocationMinute.getSelectedIndex()));

        LocalDateTime departureDate = LocalDateTime.of(year, month, day, hour, minutes);

        PlaneDTO plane = null;
        for (PlaneDTO p : planeController.getAllPlane()) {
            if (planeId.equals(p.getId())) {
                plane = p;
            }
        }

        LocationDTO departure = null;
        LocationDTO arrival = null;
        LocationDTO scale = null;
        for (LocationDTO location : locationController.getAllLocation()) {
            if (departureLocationId.equals(location.getAirportId())) {
                departure = location;
            }
            if (arrivalLocationId.equals(location.getAirportId())) {
                arrival = location;
            }
            if (scaleLocationId.equals(location.getAirportId())) {
                scale = location;
            }
        }

        if (scale == null) {
            flightController.createFlight(new FlightDTO(id, plane.getId(), departure.getAirportId(), null, arrival.getAirportId(), departureDate, hoursDurationsArrival, minutesDurationsArrival, hoursDurationsScale, minutesDurationsScale));
        } else {
            flightController.createFlight(new FlightDTO(id, plane.getId(), departure.getAirportId(), scale.getAirportId(), arrival.getAirportId(), departureDate, hoursDurationsArrival, minutesDurationsArrival, hoursDurationsScale, minutesDurationsScale));
        }

        this.FlightToAdd.addItem(id);
    }//GEN-LAST:event_CreateFlightBtnActionPerformed

    private void UpdatePassengerInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePassengerInfoBtnActionPerformed
        // TODO add your handling code here:
        long id = Long.parseLong(PassengerID.getText());
        String firstname = PassengerFirstName.getText();
        String lastname = PassengerLastName.getText();
        int year = Integer.parseInt(PassengerBirthdateYear.getText());
        int month = Integer.parseInt(PassengerBaseBirthdateMonth.getItemAt(PassengerBirthdateMonth.getSelectedIndex()));
        int day = Integer.parseInt(PassengerBaseBirthdateDay.getItemAt(PassengerBirthdateDay.getSelectedIndex()));
        int phoneCode = Integer.parseInt(CountryPhoneCode.getText());
        long phone = Long.parseLong(PassengerPhoneNumber.getText());
        String country = PassengerCountry.getText();

        LocalDate birthDate = LocalDate.of(year, month, day);

        PassengerDTO passenger = null;
        for (PassengerDTO p : passengerController.getAllPassengers()) {
            if (p.getId() == id) {
                passenger = p;
            }
        }

        passenger.setFirstName(firstname);
        passenger.setLastName(lastname);
        passenger.setBirthDate(birthDate);
        passenger.setCountryPhoneCode(phoneCode);
        passenger.setPhone(phone);
        passenger.setCountry(country);

        passengerController.updatePassenger(passenger);
    }//GEN-LAST:event_UpdatePassengerInfoBtnActionPerformed

    private void AddPassengerToFlightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPassengerToFlightBtnActionPerformed
        // TODO add your handling code here:
        long passengerId = Long.parseLong(IdPassengerToFlight.getText());
        String flightId = FlightToAdd.getItemAt(FlightToAdd.getSelectedIndex());

        PassengerDTO passenger = null;
        FlightDTO flight = null;

        for (PassengerDTO p : passengerController.getAllPassengers()) {
            if (p.getId() == passengerId) {
                passenger = p;
                break;
            }
        }

        for (FlightDTO f : flightController.getAllFlight()) {
            if (flightId.equals(f.getId())) {
                flight = f;
                break;
            }
        }

        if (passenger == null) {
            System.out.println("Pasajero no encontrado.");
            return;
        }
        if (flight == null) {
            System.out.println("Vuelo no encontrado.");
            return;
        }

        passengerController.addFlightToPassenger(passenger, flight);
    }//GEN-LAST:event_AddPassengerToFlightBtnActionPerformed

    private void DelayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelayBtnActionPerformed
        // TODO add your handling code here:
        String flightId = IdDelay.getItemAt(IdDelay.getSelectedIndex());
        int hours = Integer.parseInt(HourDelay.getItemAt(HourDelay.getSelectedIndex()));
        int minutes = Integer.parseInt(MinutesDelay.getItemAt(MinutesDelay.getSelectedIndex()));

        FlightDTO flight = null;
        for (FlightDTO f : flightController.getAllFlight()) {
            if (flightId.equals(f.getId())) {
                flight = f;
            }
        }
        flightController.delay(flight, hours, minutes);
    }//GEN-LAST:event_DelayBtnActionPerformed

    private void RefreshPassengersFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshPassengersFlightsActionPerformed
        // TODO add your handling code here:
        long passengerId = Long.parseLong(userSelect.getItemAt(userSelect.getSelectedIndex()));

        PassengerDTO passenger = null;
        for (PassengerDTO p : passengerController.getAllPassengers()) {
            if (p.getId() == passengerId) {
                passenger = p;
                break;
            }
        }

        ArrayList<FlightDTO> flights = passengerController.getAllFlights(passenger);
        DefaultTableModel model = (DefaultTableModel) PassengerFlightsTable.getModel();
        model.setRowCount(0);
        for (FlightDTO flight : flights) {
            model.addRow(new Object[]{flight.getId(), flight.getDepartureDate(), flightController.calculateArrivalDate(flight)});
        }
    }//GEN-LAST:event_RefreshPassengersFlightsActionPerformed

    private void PassengersRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PassengersRefreshActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) PassengersTable.getModel();
        model.setRowCount(0);
        for (PassengerDTO passenger : passengerController.getAllPassengers()) {
            model.addRow(new Object[]{passenger.getId(), passenger.getFirstName() + " " + passenger.getLastName(), passenger.getBirthDate(), passengerController.calculateAge(passenger), passengerController.generateFullPhone(passenger), passenger.getCountry(), passengerController.getNumFlights(passenger)});
        }
    }//GEN-LAST:event_PassengersRefreshActionPerformed

    private void RefreshFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshFlightsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) FlightsTable.getModel();
        model.setRowCount(0);
        for (FlightDTO flight : flightController.getAllFlight()) {
            model.addRow(new Object[]{flight.getId(), flightController.getDepartureLocation(flight).getAirportId(), flightController.getArrivalLocation(flight).getAirportId(), (flightController.getScaleLocation(flight) == null ? "-" : flightController.getScaleLocation(flight).getAirportId()), flight.getDepartureDate(), flightController.calculateArrivalDate(flight), flightController.getPlane(flight).getId(), flightController.getNumPassengers(flight)});
        }
    }//GEN-LAST:event_RefreshFlightsActionPerformed

    private void RefreshPlanesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshPlanesActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) PlanesTable.getModel();
        model.setRowCount(0);
        for (PlaneDTO plane : planeController.getAllPlane()) {
            model.addRow(new Object[]{plane.getId(), plane.getBrand(), plane.getModel(), plane.getMaxCapacity(), plane.getAirline(), planeController.getNumFlights(plane)});
        }
    }//GEN-LAST:event_RefreshPlanesActionPerformed

    private void RefreshLocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshLocationsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) LocationsTable.getModel();
        model.setRowCount(0);
        for (LocationDTO location : locationController.getAllLocation()) {
            model.addRow(new Object[]{location.getAirportId(), location.getAirportName(), location.getAirportCity(), location.getAirportCountry()});
        }
    }//GEN-LAST:event_RefreshLocationsActionPerformed

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitBtnActionPerformed

    private void userSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userSelectActionPerformed
        try {
            String id = userSelect.getSelectedItem().toString();
            if (!id.equals(userSelect.getItemAt(0))) {
                PassengerID.setText(id);
                IdPassengerToFlight.setText(id);
            } else {
                PassengerID.setText("");
                IdPassengerToFlight.setText("");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_userSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("flatlaf.useNativeLibrary", "false");

        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AirportFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddPassengerToFlight;
    private javax.swing.JButton AddPassengerToFlightBtn;
    private javax.swing.JPanel AirplaneRegister;
    private javax.swing.JTextField AirportCity;
    private javax.swing.JLabel AirportCityLbl;
    private javax.swing.JTextField AirportCountry;
    private javax.swing.JLabel AirportCountryLbl;
    private javax.swing.JTextField AirportID;
    private javax.swing.JLabel AirportIDLbl;
    private javax.swing.JTextField AirportLatitude;
    private javax.swing.JLabel AirportLatitudeLbl;
    private javax.swing.JTextField AirportLongitude;
    private javax.swing.JLabel AirportLongitudeLbl;
    private javax.swing.JTextField AirportName;
    private javax.swing.JLabel AirportNameLbl;
    private javax.swing.JComboBox<String> ArrivalLocation;
    private javax.swing.JLabel ArrivalLocationDUrationLbl;
    private javax.swing.JComboBox<String> ArrivalLocationHour;
    private javax.swing.JLabel ArrivalLocationLbl;
    private javax.swing.JComboBox<String> ArrivalLocationMinute;
    private javax.swing.JLabel ArrivalLocationSpace;
    private javax.swing.JTextField BaseCountryCode;
    private airport.PanelRound BottomPanel;
    private javax.swing.JTextField CountryPhoneCode;
    private javax.swing.JButton CreateFlightBtn;
    private javax.swing.JButton CreateLocationBtn;
    private javax.swing.JButton CreatePlaneBtn;
    private javax.swing.JButton DelayBtn;
    private javax.swing.JPanel DelayFlight;
    private javax.swing.JComboBox<String> DepartureDateDay;
    private javax.swing.JComboBox<String> DepartureDateHour;
    private javax.swing.JLabel DepartureDateLbl;
    private javax.swing.JComboBox<String> DepartureDateMinute;
    private javax.swing.JComboBox<String> DepartureDateMonth;
    private javax.swing.JLabel DepartureDateSpace1;
    private javax.swing.JLabel DepartureDateSpace2;
    private javax.swing.JLabel DepartureDateSpace3;
    private javax.swing.JLabel DepartureDateSpace4;
    private javax.swing.JTextField DepartureDateYear;
    private javax.swing.JComboBox<String> DepartureLocation;
    private javax.swing.JLabel DepartureLocationLbl;
    private javax.swing.JButton ExitBtn;
    private javax.swing.JTextField FlightID;
    private javax.swing.JLabel FlightIDLbl;
    private javax.swing.JComboBox<String> FlightPlane;
    private javax.swing.JLabel FlightPlaneLbl;
    private javax.swing.JPanel FlightRegister;
    private javax.swing.JComboBox<String> FlightToAdd;
    private javax.swing.JLabel FlightToAddLbl;
    private javax.swing.JScrollPane FlightsPane;
    private javax.swing.JTable FlightsTable;
    private javax.swing.JTabbedPane GeneralPanel;
    private javax.swing.JComboBox<String> HourDelay;
    private javax.swing.JLabel HoursDelayLbl;
    private javax.swing.JComboBox<String> IdDelay;
    private javax.swing.JLabel IdDelayLbl;
    private javax.swing.JTextField IdPassengerToFlight;
    private javax.swing.JLabel IdPassengerToFlightLbl;
    private javax.swing.JPanel LocationRegister;
    private javax.swing.JScrollPane LocationsPane;
    private javax.swing.JTable LocationsTable;
    private javax.swing.JComboBox<String> MinutesDelay;
    private javax.swing.JLabel MinutesDelayLbl;
    private javax.swing.JComboBox<String> PassengerBaseBirthdateDay;
    private javax.swing.JLabel PassengerBaseBirthdateLbl;
    private javax.swing.JComboBox<String> PassengerBaseBirthdateMonth;
    private javax.swing.JLabel PassengerBaseBirthdateSpace1;
    private javax.swing.JLabel PassengerBaseBirthdateSpace2;
    private javax.swing.JTextField PassengerBaseBirthdateYear;
    private javax.swing.JTextField PassengerBaseCountry;
    private javax.swing.JLabel PassengerBaseCountryLbl;
    private javax.swing.JTextField PassengerBaseFirstName;
    private javax.swing.JLabel PassengerBaseFirstNameLbl;
    private javax.swing.JTextField PassengerBaseID;
    private javax.swing.JLabel PassengerBaseIDLbl;
    private javax.swing.JTextField PassengerBaseLastName;
    private javax.swing.JLabel PassengerBaseLastNameLbl;
    private javax.swing.JTextField PassengerBasePhone;
    private javax.swing.JLabel PassengerBasePhoneLbl;
    private javax.swing.JLabel PassengerBasePhonePlus;
    private javax.swing.JLabel PassengerBasePhoneSpace;
    private javax.swing.JComboBox<String> PassengerBirthdateDay;
    private javax.swing.JLabel PassengerBirthdateLbl;
    private javax.swing.JComboBox<String> PassengerBirthdateMonth;
    private javax.swing.JTextField PassengerBirthdateYear;
    private javax.swing.JTextField PassengerCountry;
    private javax.swing.JLabel PassengerCountryLbl;
    private javax.swing.JTextField PassengerFirstName;
    private javax.swing.JLabel PassengerFirstNameLbl;
    private javax.swing.JScrollPane PassengerFlightsPane;
    private javax.swing.JTable PassengerFlightsTable;
    private javax.swing.JTextField PassengerID;
    private javax.swing.JLabel PassengerIDLbl;
    private javax.swing.JTextField PassengerLastName;
    private javax.swing.JLabel PassengerLastNameLbl;
    private javax.swing.JLabel PassengerPhoneLbl;
    private javax.swing.JTextField PassengerPhoneNumber;
    private javax.swing.JPanel PassengerRegister;
    private javax.swing.JScrollPane PassengersPane;
    private javax.swing.JButton PassengersRefresh;
    private javax.swing.JTable PassengersTable;
    private javax.swing.JTextField PlaneAirline;
    private javax.swing.JLabel PlaneAirlineLbl;
    private javax.swing.JTextField PlaneBrand;
    private javax.swing.JLabel PlaneBrandLbl;
    private javax.swing.JTextField PlaneID;
    private javax.swing.JLabel PlaneIDLbl;
    private javax.swing.JTextField PlaneMaxCapacity;
    private javax.swing.JLabel PlaneMaxCapacityLbl;
    private javax.swing.JTextField PlaneModel;
    private javax.swing.JLabel PlaneModelLbl;
    private javax.swing.JScrollPane PlanesPane;
    private javax.swing.JTable PlanesTable;
    private javax.swing.JLabel PlusLbl;
    private javax.swing.JButton RefreshFlights;
    private javax.swing.JButton RefreshLocations;
    private javax.swing.JButton RefreshPassengersFlights;
    private javax.swing.JButton RefreshPlanes;
    private javax.swing.JButton RegisterPassengerBtn;
    private javax.swing.JComboBox<String> ScaleLocation;
    private javax.swing.JLabel ScaleLocationDurationLbl;
    private javax.swing.JComboBox<String> ScaleLocationHour;
    private javax.swing.JLabel ScaleLocationLbl;
    private javax.swing.JComboBox<String> ScaleLocationMinute;
    private javax.swing.JLabel ScaleLocationSpace;
    private javax.swing.JPanel SelectionPanel;
    private javax.swing.JPanel ShowAllFlights;
    private javax.swing.JPanel ShowAllLocations;
    private javax.swing.JPanel ShowAllPassengers;
    private javax.swing.JPanel ShowAllPlanes;
    private javax.swing.JPanel ShowPassengerFlights;
    private javax.swing.JLabel SpaceLbl;
    private airport.PanelRound TopPanel;
    private javax.swing.JPanel UpdatePassengerInfo;
    private javax.swing.JButton UpdatePassengerInfoBtn;
    private javax.swing.JRadioButton administrator;
    private airport.PanelRound panelRound1;
    private javax.swing.JRadioButton user;
    private javax.swing.JComboBox<String> userSelect;
    // End of variables declaration//GEN-END:variables
}
